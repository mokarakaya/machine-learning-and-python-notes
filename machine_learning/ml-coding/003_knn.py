"""
Find K nearest neighbors for each sentences generated by data operations

"""
import numpy as np
from sentence_transformers import SentenceTransformer


class DataGenerator:
    def __init__(self):
        self.model = SentenceTransformer("all-MiniLM-L6-v2")

    def generate_embeddings(self, sentences):
        return self.model.encode(sentences)


class KNN:
    @staticmethod
    def knn(embedding, embeddings, k):
        sqrt = np.sqrt((embedding - embeddings) ** 2)
        sums = np.sum(sqrt, axis=1)
        assert len(sums) == len(embeddings)
        return np.argsort(sums)[:k]


def main():
    sentences = ["Amsterdam", "New York", "London", "paper", "pencil", "pen"]
    k = 2
    data_generator = DataGenerator()
    embeddings = data_generator.generate_embeddings(sentences)
    for idx, (embedding, sentence) in enumerate(zip(embeddings, sentences)):
        k_embeddings = np.concatenate((embeddings[:idx], embeddings[idx + 1 :]))
        k_sentences = sentences[:idx] + sentences[idx + 1 :]
        assert len(k_sentences) == len(k_embeddings)
        neigbors = KNN.knn(embedding, k_embeddings, k)
        print(f"sentence: {sentence}")
        for idx, neighbor in enumerate(neigbors):
            print(f"neighbor {idx}: {k_sentences[neighbor]}")
        print()


if __name__ == "__main__":
    main()
